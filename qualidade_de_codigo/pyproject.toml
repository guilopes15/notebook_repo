[tool.poetry]
name = "linters"
version = "0.1.0"
description = ""
authors = ["guilherme <guilherme-lopes58@hotmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.12.*"
black = "*"
blue = "*"
ruff = "*"
safety = "2.3.*"
bandit = "1.7.*"
mccabe = "0.7.*"
radon = "5.1.*"
pylint = "3.0.*"


[tool.flake8]
max-complexity = 10  # Alerte se a complexidade for > 10
ignore = "E203, W503"  # Regras do Flake8 para ignorar 
exclude = ["venv/", "migrations/"]  # Pastas ignoradas


[tool.pylint.design]
max-module-loc = 500   # Tamanho máximo por módulo
max-args = 5   # Argumentos por função


[tool.radon]
mi = true  # Habilita Maintainability Index
cc = true  # Habilita análise de complexidade
exclude = ['venv/*', 'tests/*']


[tool.safety] # Segurança
output = "full"  # Formato do relatório
ignore = [
    "51457",  # IDs de vulnerabilidades ignoradas
]


[tool.bandit] # Segurança
exclude = ["tests/*", "venv/*"]
# Ignorar regras específicas (IDs ou nomes)
skip = [
    "B101",  # Ignora "assert" em produção
    "B404",  # Ignora "import subprocess"
]
severity = "HIGH" # Nível de severidade mínima (LOW, MEDIUM, HIGH)
tests = ["B102", "B201"] # Selecionar testes específicos
output_format = "json"
output_file = "bandit_results.json"  


[tool.black]  # O blue funciona da mesma forma
line-length = 79
target-version = ["py312"]  # Versão do Python
skip-string-normalization = false  # Mantém aspas como estão
skip-magic-trailing-comma = false  # Mantém vírgulas mágicas
include = "\\.pyi?$"  # Apenas arquivos .py e .pyi
exclude = exclude = """
(
    .git/
  | .mypy_cache/
  | .tox/
  | .venv/
  | _build/
  | buck-out/
  | build/
  | dist/
)
"""
extend-exclude = ["legacy_code/"]  # Excluir diretórios adicionais


[tool.ruff]
target-version = "py312"
ignore = ["E501"]  # Exclui regras específicas
src = ["src", "app"]  # Diretórios a serem incluídos na análise
line-length = 79
exclude = ["build/", "dist/"]  # Diretórios e arquivos a serem ignorados
extend-exclude = ["migrations/", "tests/"]


# Executando o ruff lint: ruff check . && ruff check . --diff
[tool.ruff.lint]
preview = true
select = ["I", "F", "E", "W", "PL", "PT"]


# Executando o ruff format: ruff check . --fix && ruff format .
[tool.ruff.format]
quote-style = "single"  # Usa aspas simples
indent-style = "space"  # Usa espaços em vez de tabs
preview = true


[tool.ruff.mccabe]
# Complexidade ciclomatica máxima permitida
max-complexity = 10


[tool.ruff.pydocstyle]
# Convenção de docstrings
convention = "google"  # Opções: "google", "numpy", "pep257"


[tool.ruff.pep8-naming]
# Nomes ignorados pelas regras de nomenclatura
ignore-names = ["_"]


[tool.ruff.per-file-ignores]
# Regras ignoradas para arquivos específicos
"tests/*" = ["E501", "E701"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
